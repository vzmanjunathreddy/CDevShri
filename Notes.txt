Environment setup for C to run in VS Code:
================================
1. VS Code --IDE for developing C Code
2. Install the respective extenstions 
     i). C/C++ for VS Code from Microsoft
     ii). C/C++ Extensions for VS Code from Microsoft
     iii). Code Runners 
3. Language Compiler for C 
  https://sourceforge.net/projects/mingw 

Variable:caseSensitive

char myName="Shri";
char MyName="Shri";

Structure Product {

char productName;
int quantity;
float price;
int discount=10;
}

IF condition :

IF condition and Else ===> else block is going to execute with out checking the condition

IF condition and else if and else if 
Take six subject 
Calculate the grade of Stundent based on the marks
Accept marks from each subject 
total marks =1000
marks 900 ==> A+ grade
Marks 800 to 900 ==> A grade
Marks 600 to 800==> B+ grade
Marks 400 to 600 ==> B grade
Marks <400== Fail


//Calculate age of Person based input of provided by user

Infant 0 to 2 years
youngster 2 to 12 years
teenager 12 to 18
Adults 18 to 40
Middle aged 40 to 60
Old age 60 and above



// Switch Case

Accept two input numbers firstNumber ,secondNumber ,result

Provide four operands Add,Subsctraction, Mulitiply, Division

add
result =firstNumber + secondNumber

Subsctraction

result =firstNumber - secondNumber




===================

Function : A block of code which will be executed when we invoke

 We don't need to inject complexity inside single function we will modularize as much small as possible


Print data () --separate function

Write the database ()--separate function

Send an email()-- Separate function

int main()

code for printing the data
writing to file/database
sending an email


1. Function with out return value and with out parameter/s
2. Function with return value and with out parameters
3. Function with out return value but with parameters
4. Function with return value and with parameters


Types of Functions 
  1) User defined functions()
  2) System defined functions() strlen(), printf(),main()


1 User defined are of two types

      1) call by value ( passing value to a function)
      2) call by reference(pass the address of variable)

Variable named location for an memory address
int x=10

main ()
{

int x=10
abc(x);
x=10;

abc(int x)
{
x=20;
return x;
}
Pointers :


a=10
b=20

temp=a;
a=b;
b=temp;

with out using temp variables how to swap two numbers 

b=10
a=20

Call by Value:

passing the value to the invoked function
variable is named location to the memory address

int x=10==>123123
int y=20==>23444

type *nameofVariable
int *z=&x;



&==> address of operator



Variable : named memory location

int x ;
---> compiler is going to allocate some to memory address to the variable
x=10--> memory location

&--> denotes the address of the variable

x => gives the value of x
&x=> gives the address of variable x

//pointer ==> variable which stores the address of anonther varaible
int *y;// declaration of pointer is with *

y=&x;
y contains the address of x;


we swapped values of different address

we did not swap values present in same address


// Arrays:

//Data structure:

Data structure means the way the data is organized in the memory

Space complexity
Time Complexity

Linear Data Structure: Arrays 
			--Sequentially continuous memory location

			Contiguous memory location 
Non Linear Data structure : 





Array is a data structure which stores the similar data items at Contiguous memory location

==> int (size of 4 bytes) ,float , double , char

Syntax: datatype arrayName [size];

int marks[10]={10,20,30};
int marks[]={10,20,30};

marks[9]=122;// Index out of bounds


Data-Type:

1. Primitive Dataype *(int ,char, float, double)
2. Derived datatype : datatype that is derived from another type
    ex: int array[100] char names[100], Structure, Unions
3. Every array starts with index 0

// Initilization of arrays 
// last elememet is size-1 ==> 10-1 ==> arry[9]

marks[0]=100;
marks[1]=101
marks[2]=102;

Disadvantages:
Fixed sized


Two Dimensional arrays: 

type nameofanarrays[rows][cols]

char names[noOfStrings][lengthofeachString];

char names[3][15]={"ShriPoorna","Rohit sharma","Varnaaz"};


// input 5 values inside the array and find out largest element and smallest one
// input 5 values add two duplicate values print those duplicates
// pass array of marks to the function and function should return sum and based on the sum you need to calculate the ave in the main function





Multidemensional array:

int arr[2][2] =  1 2  
                 2 3 


int arr[3][2] =  1 2  
                 2 3 
	               4 6

int arr[2][3] =  1 2 4 
                 2 3 5
	         
   
Add two Matrixes 

int arr[2][2] =  1 2      1 2    
                 2 3      2 3 

                 2 4
                 4 6
	
Sub two Matrixes 

		 6 2      4 2    
     2 3      2 3 


               2 0
               0 0

Multiply two Matrix

		 6 2      4 2    6*4+2*2 6*2+2*3  28 18
     2 3      2 3    2*4+3*2 2*2+3*3  14 13



Structure --> is derived datatype or user defined data which is used to group elements of different datatypes
memory is not allocated continiously


Array : group of similar datatypes , where memory is allocated contiguously(continuous memory)

int arr[10]--> percentage of 10 students

char[20] Name
int Id
char[20] College
char[20] State
float Percentage


struct nameofstruct
{

}

struct Book{

char title[20]; 1
char author[20];1
double price 8
int pages; 4
};

14 memory 


struct Book mybook={"Shri Poorna","My Discoveries",450.34,200};

Struct is will not have contiguous memory locations



Union is also a derived or user defined datatype (a dt which is being defined based on other types)

=> Union is also same struct which can store or group  multiple datatypes
=> In Union same memory location is being used for all datatypes
=> In Union at any point of time only one data member can store the value


File :

    Text ASCII charecters  .txt, ,dat

    Binary formats (01010101) .bin

File *  --> used to connect to your file and c program

File *fp;

Open ==> fp=fopen("filename","modeofoperations")
r==> only reads the file 
w==> it will create a new file

Modes of operations on file 
   Read (Read the file if the file exists r==> no new file will be created )
   Write (first time it will check if the file is already exists if so then it will overwrite the data
          else it create new file with name and write the data)
   Apend (append to end of the filepointer);
   
Close
 

Operations

fprintf ==> Used to write the data to file

 fprint(fp,what data to write);

fscanf ==> Used to read the input from file


To read and write data from binary file 

address where you want to write the data to the disk
size of the data to be written to the disk
number of such type of data
file pointer

fread(address,size,numberofdata,filepointer)
fwrite(address,size,numbersData,filepointer)
r ==> only read
w ==> write only
w+==> read and write
rb
wb  ==> write the contents to the file if files doesn't exist will be created
ab
r+ (read and write)==> if the file doesn't exist it returns null
rb+ (read and write)==> if the file doesn't exist it returns null

Data 1Million records 


Data Structures: How efficiently we Organize the data for storage and retrieval.

Space Complexity:
Time Complexity: 3 mins 180 Seconds

Customer place order 

too much of optimistic 
arry[1110]=10; 1100Bytes

Pessimistic 
Array[10]=20 items

Dynamic Data Structure: 

Characteristics:
================
Where data can grow and shrink dynamically
Provides faster insertions and deletion
traversal would be easy

Advantages:
===========

Efficient Memory management
Provides faster insertions and deletion
Easily we can dds

Disadvantages:
Random access of elements is inefficient. 

Stuct Node{
int data;
Struct node *next;
};


Head =NULL

head=NewNode
Newnode=Null

1. Create new struct node
2. Allocate the memory
3. Add the value or insert data into the node
4. Point the node to the next node or assign it to null if it is first one or last to null.


struct node *head =NULL;

// check if Linked is Empty 

if(head==NULL){

Linked List is empty

struct node* node1;
node1= (struct node*)malloc(sizeof(struct node));
node1->data=10;
node1->Next=null
Head=nodel1;

}

else{

struct node *ptr=head;

while(ptr->next!=null)
{

ptr=ptr->next;

}

struct node* node2;
node1= (struct node*)malloc(sizeof(struct node));
node1->data=10;
ptr->next=node2
node2->next=null;

malloc which is to allocate memory
 


























   



















